(1)yarn init -y
    这一步进行初始化一些安装依赖。
    此命令将引导您完成交互式会话以创建 package.json文件。

(2)yarn add webpack webpack-cli -D
    -D代表的是开发依赖，上线时候是不需要的。 

(3)在当前的项目中创建一个文件：webpack.config.js
    webpack是node写出来的，所以需要node写法

    let path = require('path');

    module.exports = {
        mode: '',   // 代表模式，默认存在两种：production(生产模式)、development(开发模式)
        entry: './src/index.js',    // 入口文件
        output: {
            filename: 'bundle.js',  // 打包以后的文件名
            path: path.resolve(__dirname, 'dist'),  //path是打包以后代码存放的位置，并且这个位置是一个绝对路径
            // 因为需要绝对路径，所以这里要用到node.js中的path.
            // __dirname, 'dist' 的意思就是：以当前目录下产生一个dist目录。
        }
    };

(4)package.json中写入‘script’
    script 是指定了npm的脚本，

    例如：
    "scripts": {
    　　"dev": "node build/dev-server.js",
    　　"build": "node build/build.js",
    　　"unit": "cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run",
    　　"e2e": "node test/e2e/runner.js",
    　　"test": "npm run unit && npm run e2e"
    }

    npm run dev 就会自动运行 build目录下的dev-server.js文件
    npm run build 就会自动运行 build目录下的build.js 文件

(5)webpack4中内置了一个开发服务，webpack-dev-server。
    指令：yarn add webpack-dev-server

    webpack-dev-server是一个小型的Node.js Express服务器,它使用webpack-dev-middleware来服务于webpack的包.

    webpack-dev-server默认会以当前目录为基本目录,除非你制定它.
    订制：webpack-dev-server --content-base build/
    上述命令是在命令行中执行的,它将build目录作为根目录.有一点需要注意的是:webpack-dev-server生成的包并没有放在你的真实目录中,而是放在了内存中.

(6)plugins
    这是一个数组，放着所有的webpack插件。
    plugins是没有填写顺序的先后概念的，所以放心大胆的填写。

    (1) html-webpack-plugin
        html-webpack-plugin 插件是用于编译 Webpack 项目中的 html 类型的文件，如果直接将 html 文件置于 ./src 目录中，
        用 Webpack 打包时是不会编译到生产环境中的。因为 Webpack 编译任何文件都需要基于配置文件先行配置的

        安装：yarn add html-webpack-plugin --dev 或者 npm install --save-dev html-webpack-plugin

        webpack.config.js 配置文件，是最简用法 html-webpack-plugin 甚至未传递任何参数，
        但它基于这个原则 Entrypoint undefined = index.html 当未定义此插件的入口时，默认为 index.html,输出同样是 index.html。
        所以未定义入口时，不论 ./src 下有任何名称的 html 文件都不会被打包处理，但是会默认输出 index.html 文件

        使用：
        plugins: [  // 数组 放着所有的webpack插件
            new HtmlWebpackPlugin({
                template: './src/index.html',   // 选取相关的html作为模板
                filename: 'index.html',         // 打包以后的html文件名字也叫做index.html
                minify: {                       // 用于压缩html的，最小化html
                    removeAttributeQuotes: true,    // 删除html上的属性的双引号
                    collapseWhitespace: true,       // 折叠空行，将html压缩成一行
                },
                hash: true,                         // 希望生成的js代码引用的时候，使用hash戳，用于解决缓存的问题
            })
        ]

    (2) mini-css-extract-plugin
        下载对应的插件：sudo cnpm install mini-css-extract-plugin -D
        该插件的作用就是抽离css样式，异步加载不重复编译，性能更好，只针对CSS,然后再 link 进页面
        将CSS提取为独立的文件的插件，对每个包含css的js文件都会创建一个CSS文件，支持按需加载css和sourceMap。
        把 js 中 import 导入的样式文件代码，打包成一个实际的 css 文件，结合 html-webpack-plugin，在 dist/index.html 中以 link 插入 css 文件；默认将 js 中 import 的多个 css 文件，打包时合成一个

(7)loader的作用就是将源代码进行转化为模块
    loader的特点是希望单一，每一个loader都有自己的特别的方法功能。
    loader的用法：如果只用一个loader那么可以填入字符串，如果是多个loader那么使用[]的形式
    loader的执法顺序：默认是从右到左的,从下到上执行
    loader还可以写成对象的方式

    （1）css-loader 和style-loader
        css-loader: 加载.css文件
        style-loader:使用<style>将css-loader内部样式插入到head标签中
        添加对应的loader的npm包：yarn add css-loader style-loader -D

        案例：
        module: {   // 模块
            rules: [    // 规则
                // css-loader   解析@import这种语法
                // style-loader 将css插入到head标签中
                { test: /\.css$/, use: ['style-loader', 'css-loader'] },
                // loader也可以写成对象的方式,写成对象的形式的好处就是可以由一个options进行配置
                { test: /\.css$/, use: [{
                    loader:'style-loader',
                    // http://webpack.html.cn/loaders/style-loader.html 这个是style-loader的一些配置
                    options: {
                        insertAt: 'top'     // options可以做对应的style-loader配置，insertAt代表的是生成的style插入的位置，top代表的是顶部
                    }
                }, 'css-loader'] },

                { 
                    test: /\.scss$/, 
                    use: [
                            {
                                loader: 'style-loader',
                                options: {
                                    insertAt: 'top'     // options可以做对应的style-loader配置，insertAt代表的是生成的style插入的位置，top代表的是顶部
                                }
                            }, 
                            'css-loader',
                            'sass-loader'   //sass-loader的作用就是将对应的scss文件转化为css文件
                        ]
                }，

                { test: /\.js$/, use:[] }
            ]
        }

(8) const devMode = process.env.NODE_ENV !== 'production';
    process.env.NODE_ENV !== 'production' 用于判断是不是生产环境