https://mp.weixin.qq.com/s/zpAqx3MOa9qDX7cZxRE7Wg

如下几种异常情况提供一些解决方案:
(1)本地工作区文件恢复
(2)远程分支删除后，删除本地分支与其关联
(3)修改提交时的备注内容
(4)修改分支名，实现无缝衔接
(5)撤回提交
(6)撤销本地分支合并
(7)恢复误删的本地分支
(8)不确定哪个分支有自己提交的 commit

/** ------- 本地创建分支 关联远程分支 ------- */
初始化git版本库：git init
添加文件到本地库：git add
提交文件到本地库：git commit -m "msg(提交日志)"
关联远程库：git remote add url
            这个url是远程分支的url，此url可以直接git clone的那种，如：https://github.com/kisurekeyvick/kisure-notes.git
            git remote add kisurekeyvick https://github.com/kisurekeyvick/kisure-notes.git
关联之后可以用git remote -v 来检查是否关联成功

/** ------- 本地工作区文件恢复 ------- */
关联了 Git 的文件和文件夹,找到一个被删除的文件也不过就分分钟
语法：【git checkout <filename/dirname>】
例如：【git checkout 1.js】


/** ------- 远程分支删除后，删除本地分支及关联 ------- */
为方便分支提交，一般情况下会用本地命令 【git branch --set-upstream-to=origin/master master】 建立本地分支与远程分支的关联
从 master 拉出的分支可以自动建立与远程已有分支的关联
这样可以很方便的使用 git pull  和  git push 拉取远程分支的代码和将本地分支提交到远程

Git 远程分支删除之后，本地分支就无法成功推送到远程，想要重新建立与远程仓库的关联，就需要先删除其原本的与已删除的远程分支的关联。
语法：【git branch --unset-upstream <branchname>】
例如：【git branch --unset-upstream feature/tes】

删除掉关联关系之后，用 git branch -vv  命令可查看到本地分支与远程分支的关联关系


/** ------- 修改提交时的备注内容 ------- */
平时提交代码很多时候因为军情紧急，会在刚提交的时候填写了自己不太满意的备注，但笔者本人有点强迫症，一定要把它改成想要的样子咋办
语法：【git commit --amend】
例如：【git commit --amend】

使用 git log --pretty=oneline 查看内容，发现已经成功修改啦。
需要注意的是此项命令会修改提交时的commit-id，即会覆盖原本的提交，需要谨慎操作。


/** ------- 修改分支名，实现无缝衔接 ------- */
建了个分支一不小心打错了某个字母或者两个字母打反了，可能就与本意存在较大误差了，Git 提供一种已经拉取了分支，
在上面开发了不少的内容，但后来发现原本拉的分支名字就有问题的修复方法。

例如，我们的想新建的分支名为 feature/story-13711，却写成了  feature/stor-13711
语法：【git branch -m <oldbranch> <newbranch>】
例如：【git branch -m feature/stor-13711 feature/story-13711】

[可查看git branch -m oldbranch newbranch.webp]


/** ------- 撤回提交 ------- */
可能由于需求变更、或者误操作等原因需要进行提交的撤回
各种原因撤销的场景，主要包括：
(1) 已将更改交到本地存储，需要撤回提交
(2) 用新的提交内容替换上一次的提交
(3) 本地提交了错误的文件

- 已将更改提交到本地，需要撤回提交
语法：【git reset --soft [<commit-id>/HEAD~n>]】
命令：【git reset --soft HEAD~1】

！！！文件变更记录与未提交之前的文件变更记录是一致的，只是撤销了 commit 的操作


- 用新的更改替换撤回的更改
提交之中可能有些地方需要优化，我们可以撤销本次的 commit 以及文件暂存状态，修改之后再重新添加到暂存区进行提交。
语法：【git reset --mixed [<commit-id>/HEAD~n>]】
命令：【git reset --mixed HEAD~1】

！！！已变更的文件都未添加到暂存区，撤销了 commit 和 add 的操作


- 本地提交了错误的文件
语法：【git reset --hard [<commit-id>/HEAD~n>]】
命令：【git reset --hard HEAD~1】

！！！已追踪文件的变更内容都消失了，撤销了 commit 和 add 的操作，同时撤销了本地已追踪内容的修改；未追踪的内容不会被改变。


/** ------- 撤销本地分支合并 ------- */
我们合并了并不该合并的分支到目标分支上，可以使用git reset 和 git revert

语法：【git revert <commit-id>】
命令：【git revert 700920】

经过前后对比可知，revert 执行之后会在原本的记录中新增一条提交记录

reset 如上 “本地文件撤销” 例子所述，会删除掉原本已有的提交记录，在合并分支中，
会删除原本合并分支的记录。revert 则有不同，会保留原本合并分支的记录，并在其上新增一条提交记录，
便于之后有需要仍然能够回溯到 revert 之前的状态。


/** ------- 恢复误删的本地分支 ------- */
本地分支拉取之后，由于疏忽被删除，而且本地的分支并没有被同步到远程分支上，此时想要恢复本地分支。

使用 git reflog 命令可查看到该仓库下的所有历史操作【查看git reflog.webp】

语法：【git checkout -b <branch-name> <commit-id>】
命令：【git checkout -b feature/delete HEAD@{2}】

命令执行完成后，分支恢复到 HEAD@{2} 的快照，即从 master 分支拉取 feature/delete 分支的内容，
仍然缺少“新增xxx文件”的提交，直接将文件内容恢复到最新的提交内容，使用命令 git reset --hard HEAD@{1} 
即可实现硬性覆盖本地工作区内容的目的。git reflog 命令获取到的内容为本地仓库所有发生过的变更，
可谓恢复利器，既可向前追溯，亦可向后调整，满满的时光追溯器的赶脚啊。。。


/** ------- 不确定哪个分支有自己提交的 commit ------- */
工作中会经常碰到一种场景，某个提交先后合并到了各个分支上，但后来发现提交的这个修改是有问题的，
需要排查到底哪个分支包含这个提交，然后将其修复掉。

需要先确定有问题的提交的 commit-id,然后查看本地所有的分支   【查找提交记录.webp】
Git 提供了一种能够直接通过 commit-id 查找出包含该内容分支的命令 【查找分支.webp】

语法：【git branch --contains <commit-id>】
命令：【git branch --contains 700920】

命令执行后可以看到包含该问题提交的分支如下图所示，就可以很方便的在对应分支上修复内容了。
