1.缓存可以说是性能优化中简单高效的一种优化方式了。一个优秀的缓存策略可以缩短网页请求资源的距离，
    减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。

2.对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。
    浏览器缓存可以帮助我们在第一和第三步骤中优化性能。
    比如：说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，
    那么就没有必要再将数据回传回来，这样就减少了响应数据。

3.从缓存位置上来说分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络
    Service Worker
    Memory Cache
    Disk Cache
    Push Cache

    (1)Service Worker
        Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。
        使用 Service Worker的话，传输协议必须为 HTTPS。
        因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。
        Service Worker 的缓存与浏览器其他内建的缓存机制不同，
        它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。

        Service Worker 实现缓存功能一般分为三个步骤：
            首先需要先注册 Service Worker，然后监听到 install 事件以后就可以缓存需要的文件，
            那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，
            否则就去请求数据。

        当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。
        也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。
        但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容

    (2)Memory Cache
        https://my.oschina.net/duozuo/blog/804036
        https://blog.csdn.net/jl244981288/article/details/80975527

        Memory Cache 也就是内存中的缓存，主要包含的是当前中页面中已经抓取到的资源,
        例如页面上已经下载的样式、脚本、图片等。
        读取内存中的数据肯定比磁盘快,内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。
         一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。

        那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？
        因为：这是不可能的。计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。

        当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存。（打开f12,size那一块有些会标志：from memory cache）

        在HTML5中,有个很有用但常被忽略的特性,就是预先加载(prefetch),它的原理是: 
            利用浏览器的空闲时间去先下载用户指定需要的内容,然后缓存起来,这样用户下次加载时,就直接从缓存中取出来,效率就快了.

            例如：<link rel="prefetch" href="http://www.example.com/"> <!-- Firefox -->
                  <link rel="prerender" href="http://www.example.com/"> <!-- Chrome -->

    (3)Disk Cache
        存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。

        在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，
        哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，
        相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。绝大部分的缓存都来自 Disk Cache。

        浏览器会把哪些文件丢进内存中？哪些丢进硬盘中？
        (1) 对于大文件来说，大概率是不存储在内存中的，反之优先
        (2) 当前系统内存使用率高的话，文件优先存储进硬盘

    (4)Push Cache
        Push Cache（推送缓存）是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。
        它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂，
        在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令。

        以下是Push Cache的特点：
        所有的资源都能被推送，并且能够被缓存,但是 Edge 和 Safari 浏览器支持相对比较差
        可以推送 no-cache 和 no-store 的资源
        一旦连接被关闭，Push Cache 就被释放
        多个页面可以使用同一个HTTP/2的连接，也就可以使用同一个Push Cache。这主要还是依赖浏览器的实现而定，出于对性能的考虑，有的浏览器会对相同域名但不同的tab标签使用同一个HTTP连接。
        Push Cache 中的缓存只能被使用一次
        浏览器可以拒绝接受已经存在的资源推送
        你可以给其他域名推送资

4. web性能优化之：prefetch和prerender
    https://my.oschina.net/duozuo/blog/804036
    (预加载和缓存是两个概念，缓存通常使用304响应状态码来标识)

    DNS预获取可以加快页面渲染速度，无需用户点击链接就能在后台解析，所以能减少用户的等待时间，提升用户体验。
    先了解一下浏览器显示页面的过程：首先是DNS解析，然后建立TCP连接，接着下载HTML内容以及资源文件，最后才是整个页面的渲染。
    preresolve(DNS lookup) -> preconnect(socket connect) -> prefetch(http request) -> prerender(content download)
    这四个阶段必须是串行的，任何一步的延迟都会最终影响到页面加载时间
    
    (1) dns-prefetch
    可以指示浏览器去预先解析DNS域名。这样可以减少将要打开页面的延迟
    例如：<head>  <link rel='dns-prefetch' href='http://www.open-open.com/lib/view/example.com'>  ...</head>

    (2) prefetch
    设置此值能让浏览器预加载一个资源（html，js，css或图片），可以让用户跳转到其他页面时，响应速度更快
    <link rel="prefetch" href="//example.com/next-page.html" as="html" crossorigin="use-credentials">
    <link rel="prefetch" href="/library.js" as="script">
    注意： 虽然是预加载了，但是页面不会解析或者JS是不会直接执行的。

    (3) subresource
    用来标识出重要的资源，浏览器会在当前访问页面时立即下载它们
    <link rel="subresource" href="http://www.open-open.com/lib/view/critical/app.js">

    (4) prerender
    你可以用prerender来让浏览器在后台事先渲染好整个页面，这样它的打开速度将会是0秒！
    <link rel="prerender" href="http://www.open-open.com/lib/view/checkout.html">
    因为要渲染整个页面，所以它需要的所有资源也会被全部下载。如果里面的JS需要在页面显示时运行，
    可以通过页面可见性API来实现。当然只有GET才是可以预先渲染的，预渲染POST当然是不安全的

    (5) preconnect
    浏览器要建立一个连接，需要经过DNS查找，TCP三次握手和TLS协商（https需要)，这些过程需要相当的耗时，
    所以preconnect，就是一项使浏览器预先建立一个连接，等真正需要加载资源的时候能直接请求。
    例如： <link rel="preconnect" href="//example.com">
            <link rel="preconnect" href="//cdn.example.com" crossorigin>
    浏览器会进行以下步骤： 
    * 解释href的属性值，如果是合法的URL，然后继续判断URL的协议是否是http或者https否则就结束处理 
    * 如果当前页面host不同于href属性中的host,crossorigin其实被设置为anonymous(就是不带cookie了)，
        如果希望带上cookie等信息可以加上crossorign属性,corssorign就等同于设置为use-credentials

    总结：
        dns-prefetch和preconnect的存在可以让浏览器在解析文档的同时可以预先进行DNS解析或者预先建立一个链接，
        接下来加载CDN的其他资源时就可以更加快速（我猜的，其实文档并没有说浏览器应该在那个阶段进行，只是说尽可能早）。
        因为DNS解析和TCP三次握手都是相当消耗时间，当然也有其他手段去在其他方面去优化例如持久链接和多路复用，
        不用每次请求都建立建立一个新的链接，但是建立一个链接所必要的消耗是优化不了。
        所以在解析文档的同时做好这些事情，页面整体加载速度可以有一定程度上的优化。 
        prefetch和prerender可以告诉浏览器用户下个跳转的页面的地址，浏览器可以预加载这些页面资源到缓存或者预渲染好，
        用户就以后体验页面秒开（是不是很爽），当然了不一定是页面，其他资源例如图片，js和css等等也是可以预加载到缓存里面。
    
5.缓存过程分析
    https://mp.weixin.qq.com/s/HIUtWfQg4uwvYPy9zpESNQ

    浏览器与服务器通信的方式为应答模式，即是：浏览器发起HTTP请求 – 服务器响应该请求。
    那么浏览器怎么确定一个资源该不该缓存，如何去缓存呢？
    回答：浏览器第一次向服务器发起该请求后拿到请求结果后，将请求结果和缓存标识存入浏览器缓存，
         浏览器对于缓存的处理是根据第一次请求资源时返回的响应头来确定的

    具体过程：
        浏览器第一次发起http请求，会先去浏览器缓存中查找，结果没有改请求的缓存结果和缓存标识。
        于是浏览器发起http请求，服务器接收请求，并返回改请求结果和缓存规则。
        浏览器会将请求结果和缓存标识存入浏览器缓存中。

    可以知道的是：浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识。
                 浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中。

    以上两点结论就是浏览器缓存机制的关键，它确保了每个请求的缓存存入与读取。

6.缓存的分类：强缓存和协商缓存
    强缓存： 不会向服务器发送请求，直接从缓存中读取资源，在chrome控制台的Network选项中
            可以看到该请求返回200的状态码，并且Size显示from disk cache或from memory cache。
            强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control。

    (1)expires
        缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点
        xpires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。
        Expires 是 HTTP/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效

    (2)Cache-Control
        https://baike.baidu.com/pic/Cache-control/1885913/0/ac4bd11373f082021fbf3a7247fbfbedab641b49?fr=lemma&ct=single#aid=0&pic=ac4bd11373f082021fbf3a7247fbfbedab641b49

        在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存。
        比如当 Cache-Control:max-age=300时，则代表在这个请求正确返回时间（浏览器也会记录下来）的5分钟内再次加载资源，就会命中强缓存。
        Cache-Control 可以在请求头或者响应头中设置，并且可以组合使用多种指令

        Cache-Control:public        所有内容都将被缓存（客户端和代理服务器都可缓存）

        Cache-Control:private       所有内容只有客户端可以缓存

        Cache-Control:no-cache      客户端缓存内容，是否使用缓存则需要经过协商缓存来验证决定。
                                    设置了no-cache之后，并不是说浏览器就不再缓存数据，只是浏览器在使用缓存数据时，
                                    需要先确认一下数据是否还跟服务器保持一致。

        Cache-Control:no-store      所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存

        Cache-Control:max-age       max-age=xxx (xxx is numeric)表示缓存内容将在xxx秒后失效

        Cache-Control:s-maxage      同max-age作用一样，只在代理服务器中生效（比如CDN缓存）。
                                    比如当s-maxage=60时，在这60秒中，即使更新了CDN的内容，浏览器也不会进行请求。
                                    max-age用于普通缓存，而s-maxage用于代理缓存。s-maxage的优先级高于max-age。

        Cache-Control:max-stale     能容忍的最大过期时间。max-stale指令标示了客户端愿意接收一个已经过期了的响应。
                                    如果指定了max-stale的值，则最大容忍时间为对应的秒数。如果没有指定，那么说明浏览器愿意接收任何age的响应。
                                    age表示响应由源站生成或确认的时间与当前时间的差值）
                                    例如：max-stale = 120；

        Cache-Control:min-fresh     能够容忍的最小新鲜度。min-fresh标示了客户端不愿意接受新鲜度不多于当前的age加上min-fresh设定的时间之和的响应。


    (3)Expires和Cache-Control两者对比
        Expires 是http1.0的产物，Cache-Control是http1.1的产物，两者同时存在的话，Cache-Control优先级高于Expires；

    总结：强缓存判断是否缓存的依据来自于是否超出某个时间或者某个时间段，而不关心服务器端文件是否已经更新，这可能会导致加载文件不是服务器端最新的内容。

6.协商缓存
    协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：
    (1) 协商缓存生效，返回304和Not Modified
    (2) 协商缓存失效，返回200和请求结果

    协商缓存可以通过设置两种 HTTP Header 实现：Last-Modified 和 ETag 
    (1) Last-Modified和If-Modified-Since
        浏览器在第一次访问资源时，服务器返回资源的同时，在response header中添加 Last-Modified的header，
        值是这个资源在服务器上的最后修改时间，浏览器接收后缓存文件和header；
        浏览器下一次请求这个资源，浏览器检测到有 Last-Modified这个header，于是添加If-Modified-Since这个header，
        值就是Last-Modified中的值；服务器再次收到这个资源请求，会根据 If-Modified-Since 
        中的值与服务器中这个资源的最后修改时间对比，如果没有变化，返回304和空的响应体，直接从缓存读取，
        如果If-Modified-Since的时间小于服务器中这个资源的最后修改时间，说明文件有更新，于是返回新的资源文件和200

    (2) ETag和If-None-Match
        Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，只要资源有变化，Etag就会重新生成。
        浏览器在下一次加载资源向服务器发送请求时，会将上一次返回的Etag值放到request header里的If-None-Match里，
        服务器只需要比较客户端传来的If-None-Match跟自己服务器上该资源的ETag是否一致，就能很好地判断资源相对客户端而言是否被修改过了。
        如果服务器发现ETag匹配不上，那么直接以常规GET 200回包形式将新的资源（当然也包括了新的ETag）发给客户端；
        如果ETag是一致的，则直接返回304知会客户端直接使用本地缓存即可。

7.缓存机制
    强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)，
    协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回200，重新返回资源和缓存标识，再存入浏览器缓存中；生效则返回304，继续使用缓存。