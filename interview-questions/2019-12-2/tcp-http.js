/** 
 * https://mp.weixin.qq.com/s/H7_9fkmgi7nxdhHq6RZ2hw
 * 
 * tcp、http知识点
 */

/** 
 * - 前言
 * 
 * 要说http就绕不开tcp，TCP协议对应于传输层，而HTTP协议对应于应用层，从本质上来说，二者没有可比性。但是，http是基于tcp协议的。
 */

/** 
 * - TCP三次握手和四次挥手？
 * - [查看2019-11-21的tcp笔记]
 */

/** 
 * - TCP和UDP的区别？
 * - [查看tcp-udp对比图.jpg]
 * 
 * TCP 协议面向有连接，能正确处理丢包，传输顺序错乱的问题，
 * 但是为了建立与断开连接，需要至少7次的发包收包，资源浪费
 * - [tcp聊天模式.jpg]
 * 这种情况就是对方用了TCP协议来聊天，要经过--在吗？--在--巴拉巴拉，才能成功的传递信息。
 * 而如果对方使用UDP，则会有事直接说，不管我收没收到。（以后找我请用UDP协议，着急直接打电话！）
 * 
 * - tcp是面向字节流的（TCP是一种流协议（stream protocol）。这就意味着数据是以字节流的形式传递给接收者的）
 * 
 * UDP 面向无连接，不管对方有没有收到，如果要得到通知，需要通过应用层
 * - [upd.gif]
 * 从上面的动态图可以得知，UDP只会把想发的数据报文一股脑的丢给对方，并不在意数据有无安全完整到达。
 *  (1) 面向无连接
 *      首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。
 *      并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作
 *  (2) 有单播，多播，广播的功能
 *      UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，
 *      也就是说 UDP 提供了单播，多播，广播的功能。
 *  (3) UDP是面向报文的
 *      发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。
 *      UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。
 *  (4) 不可靠性
 *      首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠
 *      并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。
 * 
 * 总结：
 * TCP向上层提供面向连接的可靠服务 ，UDP向上层提供无连接不可靠服务。
 * 虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为
 * 对数据准确性要求高，速度可以相对较慢的，可以选用TCP
 */

/** 
 * - http
 * 
 * Http协议是建立在TCP协议基础之上的，当浏览器需要从服务器获取网页数据的时候，会发出一次Http请求。
 * Http会通过TCP建立起一个到服务器的连接通道，当本次请求需要的数据完毕后，Http会立即将TCP连接断开，
 * 这个过程是很短的。所以Http连接是一种短连接，是一种无状态的连接。
 * 
 * 所谓的无状态，是指浏览器每次向服务器发起请求的时候，不是通过一个连接，而是每次都建立一个新的连接。
 * 如果是一个连接的话，服务器进程中就能保持住这个连接并且在内存中记住一些信息状态。
 * 而每次请求结束后，连接就关闭，相关的内容就释放了，所以记不住任何状态，成为无状态连接。
 */

/** 
 * - HTTP的全称
 * 
 * 超文本传输协议
 * 
 * - 状态码
 * 
 * 2XX 成功
 *      200 OK，表示从客户端发来的请求在服务器端被正确处理
 *      204 No content，表示请求成功，但响应报文不含实体的主体部分
 *      206 Partial Content，进行范围请求
 * 
 * 3XX 重定向
 *      301 moved permanently，永久性重定向，表示资源已被分配了新的 URL
 *      302 found，临时性重定向，表示资源临时被分配了新的 URL
 *      303 see other，表示资源存在着另一个 URL，应使用 GET 方法丁香获取资源
 *      304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况
 *      307 temporary redirect，临时重定向，和302含义相同
 * 
 * 4XX 客户端错误
 *      400 bad request，请求报文存在语法错误
 *      401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息
 *      403 forbidden，表示对请求资源的访问被服务器拒绝
 *      404 not found，表示在服务器上没有找到请求的资源
 * 
 * 5XX 服务器错误
 *      500 internal sever error，表示服务器端在执行请求时发生了错误
 *      503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求
 */

/** 
 * - HTTP协议格式
 * 
 * HTTP的请求和响应的消息协议是一样的，分为三个部分，起始行、消息头和消息体。
 * HTTP请求的起始行称为请求行，形如GET /index.html HTTP/1.1
 * HTTP响应的起始行称为状态行，形如200 ok
 */

/** 
 * - 输入url到页面加载都发生了什么事情？
 * 
 * 输入地址
 * 浏览器查找域名的 IP 地址 这一步包括 DNS 具体的查找过程，包括：浏览器缓存->系统缓存->路由器缓存...
 * 浏览器向 web 服务器发送一个 HTTP 请求
 * 服务器的永久重定向响应（从 http://example.com 到 http://www.example.com）
 * 浏览器跟踪重定向地址
 * 服务器处理请求
 * 服务器返回一个 HTTP 响应
 * 浏览器显示 HTML
 * 浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）
 *  浏览器发送异步请求
 */

