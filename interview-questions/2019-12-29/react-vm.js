/** 
 * 关于react的虚拟dom
 */

/** 
 * (1) 什么是虚拟 DOM
 * 
 * 本质上是 js 对象，这个对象就是更加轻量级的对 DOM 的描述。
 */

/** 
 * (2) 为什么要有虚拟 DOM
 * 
 * 传统前端的编程方式是命令式的，直接操纵 DOM，告诉浏览器该怎么干。
 * 这样的问题就是，大量的代码被用于操作 DOM 元素，且代码可读性差，可维护性低。
 * 
 * React 的出现，将命令式变成了声明式，摒弃了直接操作 DOM 的细节，只关注数据的变动，
 * DOM 操作由框架来完成，从而大幅度提升了代码的可读性和可维护性。
 * 
 * 有一点需要注意： 直接操作 DOM 的性能并不会低于虚拟 DOM 和 Diff 算法，甚至还会优于。
 *              因为 Diff 算法的比较过程，比较是为了找出不同从而有的放矢的更新页面。但是比较也是要消耗性能的。
 *              而直接操作 DOM 就是有的放矢，我们知道该更新什么不该更新什么，所以不需要有比较的过程。所以直接操作 DOM 效率可能更高。
 * 
 * React 厉害的地方并不是说它比 DOM 快，而是说不管你数据怎么变化，我都可以以最小的代价来进行更新 DOM。
 * 方法就是我在内存里面用新的数据刷新一个虚拟 DOM 树，然后新旧 DOM 进行比较，找出差异，再更新到 DOM 树上。
 * 
 * 框架的意义在于为你掩盖底层的 DOM 操作，让你用更声明式的方式来描述你的目的，从而让你的代码更容易维护。
 * 没有任何框架可以比纯手动的优化 DOM 操作更快，因为框架的 DOM 操作层需要应对任何上层 API 可能产生的操作，它的实现必须是普适的。
 */

/** 
 * (3) 虚拟 DOM 的作用
 * 
 * - Virtual DOM 在牺牲(牺牲很关键)部分性能的前提下，增加了可维护性，这也是很多框架的通性。
 * - 实现了对 DOM 的集中化操作，在数据改变时先对虚拟 DOM 进行修改，再反映到真实的 DOM 中，用最小的代价来更新 DOM，提高效率
 * - 打开了函数式 UI 编程的大门
 * - 可以渲染到 DOM 以外的端，使得框架跨平台，比如 ReactNative，React VR 等
 * - 组件的高度抽象化
 */

/** 
 * (4) 虚拟 DOM 的缺点
 * 
 * - 首次渲染大量 DOM 时，由于多了一层虚拟 DOM 的计算，会比 innerHTML 插入慢
 * - 如果虚拟 DOM 大量更改，这是合适的。但是单一的，频繁的更新的话，虚拟 DOM 将会花费更多的时间处理计算的工作。
 *      所以，如果你有一个 DOM 节点相对较少页面，用虚拟 DOM，它实际上有可能会更慢。但对于大多数单页面应用，这应该都会更快。
 */
