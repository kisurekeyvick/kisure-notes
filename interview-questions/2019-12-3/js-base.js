/** 
 * https://mp.weixin.qq.com/s/2GaZ_HZMmMpP5kkqmvI04g
 */

/** 
 * (1) JavaScript内存机制之问——数据是如何存储的？
 * 
 * 基本数据类型用栈存储，引用数据类型用堆存储
 * 
 * 以下数据类型存储在栈中:
 *  boolean
 *  null
 *  undefined
 *  number
 *  string
 *  symbol
 *  bigint
 * 
 * 而所有的对象数据类型存放在堆中
 * 
 * 值得注意的是，对于赋值操作，原始类型的数据直接完整地赋值变量值，对象数据类型的数据则是复制引用地址。
 */
let obj = { a: 1 };
let newObj = obj;
newObj.a = 2;
console.log(obj.a);//变成了2

/** 
 * 之所以会这样，是因为 obj 和 newObj 是同一份堆空间的地址，改变newObj，等于改变了共同的堆内存，
 * 这时候通过 obj 来获取这块内存的值当然会改变。
 */

/** 
 * - 为什么不全部用栈来保存呢？
 * 
 * 对于系统栈来说，它的功能除了保存变量之外，还有创建并切换函数执行上下文的功能。
 * 
 * 假设用ESP指针来保存当前的执行状态，在系统栈中会产生如下的过程：
 * (1) 调用func, 将 func 函数的上下文压栈，ESP指向栈顶
 * (2) 执行func，又调用f函数，将 f 函数的上下文压栈，ESP 指针上移。
 * (3) 执行完 f 函数，将ESP 下移，f函数对应的栈顶空间被回收。
 * (4) 执行完 func，ESP 下移，func对应的空间被回收。
 */
function f(a) {
    console.log(a);
}

function func(a) {
    f(a);
}

func(1);
// 因此你也看到了，如果采用栈来存储相对基本类型更加复杂的对象数据，那么切换上下文的开销将变得巨大！

/** 
 * (2) V8 引擎如何进行垃圾内存的回收？
 * 
 * 在其他的后端语言中，如Java/Go, 对于内存的使用没有什么限制，但是JS不一样，V8只能使用系统的一部分内存，
 * 具体来说，在64位系统下，V8最多只能分配1.4G, 在 32 位系统中，最多只能分配0.7G。
 * 
 * 对于栈内存而言，当ESP指针下移，也就是上下文切换之后，栈顶的空间会自动被回收。但对于堆内存而言就比较复杂了。
 * 
 * V8 为什么要给它设置内存上限？明明我的机器大几十G的内存，只能让我用这么一点？
 * 当我们构造一个对象进行赋值操作的时候，其实相应的内存已经分配到了堆上。
 * 你可以不断的这样创建对象，让 V8 为它分配空间，直到堆的大小达到上限。
 * 但是V8设置内存上限，是由两个因素所共同决定的，一个是JS单线程的执行机制，另一个是JS垃圾回收机制的限制。
 * 
 * - 首先JS是单线程运行的，这意味着一旦进入到垃圾回收，那么其它的各种运行逻辑都要暂停; 
 *      另一方面垃圾回收其实是非常耗时间的操作，以 1.5GB 的垃圾回收堆内存为例，V8 做一次小的垃圾回收需要50ms 以上。
 * 
 * 可见其耗时之久，而且在这么长的时间内，我们的JS代码执行会一直没有响应，造成应用卡顿，导致应用性能和响应能力直线下降。
 * 因此，V8 做了一个简单粗暴的选择，那就是限制堆内存，也算是一种权衡的手段
 */

/** 
 * (3) 描述一下 V8 执行一段JS代码的过程？
 * 
 * 站在 V8 的角度，理解其中的执行机制，也能够帮助我们理解很多的上层应用，包括Babel、Eslint、前端框架的底层机制。
 * 首先需要明白的是，机器是读不懂 JS 代码，机器只能理解特定的机器码，那如果要让 JS 的逻辑在机器上运行起来，
 * 就必须将 JS 的代码翻译成机器码，然后让机器识别。JS属于解释型语言，
 * 对于解释型的语言说，解释器会对源代码做如下分析:
 *      - 通过词法分析和语法分析生成 AST(抽象语法树)
 *      - 
 */
