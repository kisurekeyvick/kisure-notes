/**
 * 关于html5的适配
 */

/** 
 * https://blog.csdn.net/siwangdexie_copy/article/details/85097410
 * 
 * (1)当我们使用UI框架代码的时候，因为框架中的代码样式是用PX的，但是我们要在不同的移动端手机上显示同样效果的内容
 *     于是我们需要一个webpack插件：postcss-pxtorem
 * 
 *     配置：在webpack.config.js中，配置postcss-loader的所在位置，添加如下代码：
 *          require('postcss-pxtorem')({
              rootValue: 100,              // 根节点的fontSize大小(单位是px)
              propWhiteList: ['*'],        // 属性的选择器，*表示通用           
              minPixelValue:2,             // 设置要替换的最小px值
            }),

    (2)针对于设计稿，我们需要把它调整到750px进行同比例设置大小
 */

/** 
 * https://www.jianshu.com/p/64877ce6e893
 * 
 * (1) 屏幕尺寸、屏幕分辨率、屏幕像素密度
 * 屏幕尺寸: 指屏幕的对角线的长度，单位是英寸，1英寸=2.54厘米，常见的屏幕尺寸有2.4、2.8、3.5、3.7、4.2、5.0、5.5、6.0等。
 *          所以6.0的手机 6*2.54 = 15.24 厘米。
 * 
 * 屏幕分辨率：指在横纵向上的像素点数，单位是px，1px=1个像素点。
 *          一般纵向像素 * 横向像素来表示一个手机的分辨率，如1960*1080。
 *          （这里的1像素指的是物理设备的1个像素点）。比如（iphone6 750 * 1337） （iphone6plus 1960 * 1080）
 * 
 * (2) 物理像素，CSS像素
 * 设备像素/物理像素: 买手机的时候有一个n x m的分辨率，那是屏幕的n x m个呈像的点，一个点（小方格）为一个物理像素。它是屏幕能显示的最小粒度。
 *                  每个像素可以根据操作系统设置自己的颜色和亮度。
 * 
 * CSS像素：CSS像素是一个抽象的单位，主要使用在浏览器上，用来精确的度量Web页面上的内容
 * 
 * CSS像素与物理像素的关系：一个width为200px的元素，它占据了200个CSS像素。
 *                      但200个CSS像素占据多少个物理像素取决于屏幕的特性（是否是高密度，即像素比）和用户的缩放行为。
 * 
 * 位图像素：一个位图像素是栅格图像（如：png，jpg，gif等）最小的数据单元，至少1个位图像素对应1个物理像素，图片才能得到完美清晰的展示。
 * 
 * 对于Web开发者而言：我们使用的每一个CSS和JavaScript定义的像素本质上代表的都是CSS像素，
 * 我们在开发过程中并不在意一个CSS像素到底跨越了多少个设备像素。我们将这个依赖于屏幕特性和用户缩放程度的复杂计算交给了浏览器。
 * 
 * (3) 像素比
 * 像素比：它的官方的定义为：设备物理像素和设备独立像素的比例，也就是devicePixelRatio = 物理像素/独立像素（window.devicePixelRatio）
 * 
 * (4) 视口
 * 布局视口：在PC端上，布局视口等于浏览器窗口的宽度。
 * 视觉视口：视觉视口是用户正在看到的区域。用户可以缩放来操作视觉视口，而不影响视觉视口的宽度。
 *          视觉视口决定了用户看到了什么。在JavaScript上获取视觉视口的宽度可以通过`window.innerWidth得到。
 */

/** 
 * 为什么设计稿是750px的？
 * 750px是iphone6的物理像素，也叫屏幕分辨率
 * iphone6的参数：4.7寸(屏幕尺寸)  375*667(屏幕分辨率PT) 750*1334(屏幕分辨率PX) 
 * 所以，当我们切换到750px设计稿时候，计算rem的方式：375/750*100
 * 
 * 为什么要乘100？
 * 首先375 / 750是0.5，浏览器默认最小字体为12px，所以我们需要放大一些，而100又很好算，我们只需要将设计稿量出来的长度（px）
 */

/** 
 * 关于rem的计算
 * 例如：假设html的fontSize:16px;那么1rem = 16px;是不是可以理解为1个rem单位等于16px;
 * 
 * 以750的设计稿为例:（手淘插件 flexible.js）
 * 根据：750px 对应 10rem
 * 计算公式： 750     750设计稿px
 *          ———— = ——————————————
 *          10       计算结果值
 */