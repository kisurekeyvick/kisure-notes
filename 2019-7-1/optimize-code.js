/** 
 * 如何编写优化的 JavaScript
 * 
 * (1) 对象属性的顺序：始终以相同的顺序实例化对象属性，以便可以共享隐藏的类和随后优化的代码。
 * 
 * (2) 动态属性： 因为在实例化之后向对象添加属性将强制执行隐藏的类更改，并降低之前隐藏类所优化的所有方法的执行速度，
 *      所以在其构造函数中分配所有对象的属性。
 * 
 * (3) 方法：重复执行相同方法的代码将比仅执行一次的多个不同方法（由于内联缓存）的代码运行得更快
 * 
 * (4) 避免稀疏数组，其中键值不是自增的数字，并没有存储所有元素的稀疏数组是哈希表。
 *      这种数组中的元素访问开销较高。另外，尽量避免预分配大数组。
 *      最好是按需增长。最后，不要删除数组中的元素，这会使键值变得稀疏。
 */

/** 
 * 稀疏数组 和 密集数组
 * (1) 稀疏数组
 *      例如：const arr = new Array(3);
 *      当你遍历它时，你会发现，它并没有元素，JavaScript会跳过这些缝隙
 * 
 *      还有一些其他情况会生成稀疏数组,例如：
 *      const arr = [];     arr[0] = 0;     arr[100] = 100;
 * 
 * (2) 密集数组
 *      var a = Array.apply(null, Array(3));    //  [undefined, undefined, undefined]
 *      你现在可以看到数组里面有真实元素了，虽然元素的值是undefined，但是你可以遍历到这些数组元素了，还可以为每个元素重新赋值：
 * 
 * 总结！；
 * 实际上，JavaScript并没有常规的数组，所有的数组其实就是个对象，只不过会自动管理一些"数字"属性和length属性罢了。
 * 说的更直接一点，JavaScript中的数组根本没有索引，因为索引应该是数字，
 * 而JavaScript中数组的索引其实是字符串：arr[1]其实就是arr["1"]，给arr["1000"] = 1，arr.length也会自动变为1001。
 * 
 * 这些表现的根本原因就是：JavaScript中的对象就是字符串到任意值的键值对。注意键只能是字符串
 */

/** 
 * 一些关于数组的骚操作：
 */
Array.apply(null, Array(3)).map(Function.prototype.call.bind(Number))
Array.apply(null, Array(3)).map(function (x,i) { return i })
