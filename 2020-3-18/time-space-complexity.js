/** 
 * https://zhuanlan.zhihu.com/p/32135157
 * 
 * 时间 空间 复杂度
 */

/** 
 * 时间复杂度：评估执行程序所需的时间。可以估算出程序对处理器的使用程度。
 * 空间复杂度：评估执行程序所需的存储空间。可以估算出程序对计算机内存的使用程度。
 */

/** 
 * 时间频度:
 * 我们把一个算法中的语句执行次数称为时间频度。通常用T(n)表示。
 * 在时间频度T(n)中，n又代表着问题的规模，当n不断变化时，T(n)也会不断地随之变化。
 * 为了了解这个变化的规律，时间复杂度这一概念就被引入了。
 * 一般情况下算法基础本操作的重复执行次数为问题规模n的某个函数，也就是时间频度T(n)。
 * 如果有某个辅助函数f(n)，当趋于无穷大的时候，T(n)/f(n)的极限值是不为零的某个常数，那么f(n)是T(n)的同数量级函数，记作T(n)=O(f(n))，被称为算法的渐进时间复杂度，又简称为时间复杂度。
 */

/** 
 * 大O表示法：
 * 用O(n)来体现算法时间复杂度的记法被称作大O表示法
 * 大O表示法O(f(n))中的f(n)的值可以为1、n、logn、n^2 等，所以我们将O(1)、O(n)、O(logn)、O( n^2 )分别称为常数阶、线性阶、对数阶和平方阶。
 */

/** 
 * 推导大O阶
 * 推导大O阶有一下三种规则：
 *      用常数1取代运行时间中的所有加法常数
 *      只保留最高阶项
 *      去除最高阶的常数
 */

/**
 * 对数公式：
 * 如果a^x=N(a>0,且a≠1)，则x叫做以a为底N的对数,记做x=log(a)(N)，其中a要写于log右下。
 */ 

/** 
 * 常数阶
 */ 
let sum = 0, n = 10; // 语句执行一次 
let sum = (1+n)*n/2; // 语句执行一次 
console.log(`The sum is : ${sum}`) //语句执行一次 
/** 这样的一段代码它的执行次数为 3 ，然后我们套用规则1，则这个算法的时间复杂度为O(1)，也就是常数阶。 */

/** 
 * 线性阶
 */
let i =0; // 语句执行一次 
while (i < n) { // 语句执行n次 
  console.log(`Current i is ${i}`); //语句执行n次
  i++; // 语句执行n次
}
/** 这个算法中代码总共执行了 3n + 1次，根据规则 2->3，因此该算法的时间复杂度是O(n)。 */

/** 
 * 对数阶
 */
let number = 1; // 语句执行一次 
while (number < n) { // 语句执行logn次
  number *= 2; // 语句执行logn次
}
/** 
 * 上面的算法中，number每次都放大两倍，我们假设这个循环体执行了m次，那么2^m = n即m = logn，
 * 所以整段代码执行次数为1 + 2*logn，则f(n) = logn，时间复杂度为O(logn)。
 */


/** 
 * 平方阶
 */
for (let i = 0; i < n; i++) { // 语句执行n次 
  for (let j = 0; j < n; j++) { // 语句执行n^2次 
     console.log('I am here!'); // 语句执行n^2
  }
}
/** 上面的嵌套循环中，代码共执行 2*n^2 + n，则f(n) = n^2。所以该算法的时间复杂度为O(n^2 ) */

/** 
 * 常见时间复杂度的比较
 * O(1)<O(logn)<O(n)<O(nlogn)<O(n²)<O(n³)<O(2ⁿ)<O(n!)
 */


function run(n) {
  if (n <= 1) {
    return n;
  }

  return run(n - 2) + run(n - 1);
}
/** 时间复杂度：2^n */


/** 空间复杂度 */

/** 空间复杂度 O(1) */
let i = 1;
let j = 2;
++i;
j++;
let m = i + j;
/** 
 * 如果算法执行所需要的临时空间不随着某个变量n的大小而变化，即此算法空间复杂度为一个常量，可表示为 O(1)。
 */

/** 空间复杂度 O(n) */
function run(n){
  let m = Array.apply(null, Array(n))
  for(i=1; i <= n; ++i) {
     j = i;
     j++;
  }  
}
/** 第一行new了一个数组出来，这个数据占用的大小为n，后面虽然有循环，但没有再分配新的空间，因此，这段代码的空间复杂度主要看第一行即可，即 S(n) = O(n)。 */
