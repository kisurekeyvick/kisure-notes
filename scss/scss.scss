/**
    计算
*/
$width: 1000px;
p {
    width: $width / 2;
    width: round(1.5)/2; 
    margin-left: 5px + 8px/2px;
}

// (1) 运算表达式与其他值连用时，用空格做连接符
p {
    margin: 3px + 4px auto;
}

// 转化为：
p { margin: 7px auto; }

// (2) 在有引号的文本字符串中使用 #{} 插值语句可以添加动态的值
p:before {
    content: "I ate #{5 + 10} pies!";
}

// 编译后
p:before {
    content: "I ate 15 pies!"; 
}

// (3) 圆括号可以用来影响运算的顺序
p {
    width: 1em + (2em * 3);
}

// 编译后
p {
    width: 7em; 
}

// (4) 通过 #{} 插值语句可以在选择器或属性名中使用变量
$name: foo;
$attr: border;
p.#{$name} {
  #{$attr}-color: blue;
}

// 编译后
p.foo {
    border-color: blue; 
}

// (5) 变量定义 !default
// 变量是 null 空值时将视为未被 !default 赋值
$content: "First content";
$content: "Second content?" !default;

#main {
  content: $content;
}

// 编译后
#main {
    content: "First content";
}

// (6) 嵌套 @import
.example {
    color: red;
}

// 导入到 #main 样式内
#main {
    @import "example";
}

// 编译后
#main .example {
    color: red;
}

// (7) @media
// Sass 中 @media，允许其在 CSS 规则中嵌套。如果 @media 嵌套在 CSS 规则内，编译时，@media 将被编译到文件的最外层，包含嵌套的父选择器
.sidebar {
    width: 300px;
    @media screen and (orientation: landscape) {
      width: 500px;
    }
}

// 编译后
.sidebar {
    width: 300px; 
}
@media screen and (orientation: landscape) {
    .sidebar {
        width: 500px; 
    } 
}

// (8) @extend
/**
    在设计网页的时候常常遇到这种情况：一个元素使用的样式与另一个元素完全相同，但又添加了额外的样式。
    通常会在 HTML 中给元素定义两个 class，一个通用样式，一个特殊样式
*/
.error {
    border: 1px #f00;
    background-color: #fdd;
}

.seriousError {
    @extend .error;
    border-width: 3px;
}
// 上面代码的意思是将 .error 下的所有样式继承给 .seriousError

// (9) @extend 继续延伸
.error {
    border: 1px #f00;
    background-color: #fdd;
}

.seriousError {
    @extend .error;
    border-width: 3px;
}

.criticalError {
    @extend .seriousError;
    position: fixed;
    top: 10%;
    bottom: 10%;
    left: 10%;
    right: 10%;
}

// (10) @extend-Only 选择器 
// 有时，需要定义一套样式并不是给某个元素用，而是只通过 @extend 指令使用，
// Sass 引入了“占位符选择器”，看起来很像普通的 id 或 class 选择器，只是 # 或 . 被替换成了 %
#context a%extreme {
    color: blue;
    font-weight: bold;
    font-size: 2em;
}

.notice {
    @extend %extreme;
}

// 编译后
#context a.notice {
    color: blue;
    font-weight: bold;
    font-size: 2em; 
}

// (11) !optional
/**
    如果 @extend 失败会收到错误提示，比如，这样写 a.important {@extend .notice}
    当没有 .notice 选择器时，将会报错，只有 h1.notice 包含 .notice 时也会报错，因为 h1 与 a 冲突，会生成新的选择器

    如果要求 @extend 不生成新选择器，可以通过 !optional 声明达到这个目的
*/
a.important {
    @extend .notice !optional;
}

// (12) 在指令中延伸 (@extend in Directives)
/**
    Sass 不可以将 @media 层外的 CSS 规则延伸给指令层内的 CSS，这样会生成大量的无用代码。
    也就是说，如果在 @media （或者其他 CSS 指令）中使用 @extend，必须延伸给相同指令层中的选择器。
*/
// 这个是可行的
@media print {
    .error {
      border: 1px #f00;
      background-color: #fdd;
    }
    .seriousError {
      @extend .error;
      border-width: 3px;
    }
}

// 但是这个是不可行的
.error {
    border: 1px #f00;
    background-color: #fdd;
}
  
@media print {
    .seriousError {
        // INVALID EXTEND: .error is used outside of the "@media print" directive
        @extend .error;
        border-width: 3px;
    }
}

// (13) @if
// 当 @if 的表达式返回值不是 false 或者 null 时，条件成立，输出 {} 内的代码
p {
    @if 1 + 1 == 2 { border: 1px solid; }
    @if 5 < 3 { border: 2px dotted; }
    @if null  { border: 3px double; }
}

// 编译后
p {
    border: 1px solid; 
}

// (14) @for
/** 
    @for 指令可以在限制的范围内重复输出格式，每次按要求（变量的值）对输出结果做出变动。
    这个指令包含两种格式：@for $var from <start> through <end>，或者 @for $var from <start> to <end>，
    区别在于 through 与 to 的含义：当使用 through 时，条件范围包含 <start> 与 <end> 的值，
    而使用 to 时条件范围只包含 <start> 的值不包含 <end> 的值。
*/
@for $i from 1 through 3 {
    .item-#{$i} { width: 2em * $i; }
}

// 编译后
.item-1 {
    width: 2em; 
}
.item-2 {
    width: 4em; 
}
.item-3 {
    width: 6em; 
}

// (15) @each
/** 
    @each 指令的格式是 $var in <list>, $var 可以是任何变量名
    比如 $length 或者 $name，而 <list> 是一连串的值，也就是值列表。
*/
@each $animal in puma, sea-slug, egret, salamander {
    .#{$animal}-icon {
        background-image: url('/images/#{$animal}.png');
    }
}

// 编译后
.puma-icon {
    background-image: url('/images/puma.png'); 
}
.sea-slug-icon {
    background-image: url('/images/sea-slug.png'); 
}
.egret-icon {
    background-image: url('/images/egret.png'); 
}
.salamander-icon {
    background-image: url('/images/salamander.png'); 
}

// (16) 参数 (Arguments)
@mixin sexy-border($color, $width) {
    border: {
      color: $color;
      width: $width;
      style: dashed;
    }
}

p { 
    @include sexy-border(blue, 1in); 
}

// (17) 关键词参数 (Keyword Arguments)
p { 
    @include sexy-border($color: blue); 
}

h1 { 
    @include sexy-border($color: blue, $width: 2in); 
}

// (18) 函数指令 (Function Directives)
$grid-width: 40px;
$gutter-width: 10px;

@function grid-width($n) {
    @return $n * $grid-width + ($n - 1) * $gutter-width;
}
  
#sidebar { width: grid-width(5); }

// 编译后
#sidebar {
    width: 240px; 
}
